## Fonctionnalités

### Côté Serveur
- **Deux serveurs intégrés** :
  - WebSocket pour la communication temps réel du jeu
  - HTTP pour servir les images des cartes
- Gestion de plusieurs parties simultanées
- Support des nouv# Jeu de Cartes Multijoueur

## Installation et Configuration

### 1. Dépendances Python

Installez les dépendances nécessaires :

```bash
pip install websockets
```

### 2. Structure des fichiers

Assurez-vous d'avoir cette structure de fichiers :

```
votre_projet/
├── cards.py          # Votre fichier mis à jour
├── players.py        # Votre fichier existant  
├── deck.py           # Votre fichier existant
├── game.py           # Votre fichier existant
├── server.py         # Le serveur WebSocket (artifact ci-dessus)
├── http_server.py    # Le serveur HTTP pour les images
├── client.html       # Le client web (artifact ci-dessus)
├── run.py           # Script de lancement
├── requirements.txt  # Ce fichier
└── ressources/       # Dossier pour les images des cartes
    ├── special_cards/
    ├── attack_cards/
    ├── aquisition_cards/
    │   ├── trip/
    │   ├── houses/
    │   └── animals/
    ├── personnal_life/
    │   ├── flirts/
    │   ├── mariages/
    │   └── childs/
    └── professionnal_life/
        ├── StudyCards/
        ├── JobCards/
        └── SalaryCards/
```

### 3. Images des cartes

Le système affiche maintenant les vraies images des cartes :

- **Format recommandé** : PNG ou JPG
- **Dimensions recommandées** : 200x280 pixels (ratio carte standard)
- **Nommage** : Selon les noms utilisés dans votre code Python
- **Fallback** : Si une image est manquante, un placeholder 🃏 s'affiche

**Exemple de structure d'images :**
```
ressources/
├── personnal_life/flirts/flirt1.png
├── personnal_life/flirts/flirt2.png
├── professionnal_life/StudyCards/etude_simple.png
├── professionnal_life/StudyCards/etude_double.png
├── professionnal_life/JobCards/job1.png
├── professionnal_life/SalaryCards/salary1.png
├── aquisition_cards/trip/voyage1.png
├── aquisition_cards/houses/maison1.png
├── personnal_life/mariages/mariage1.png
└── personnal_life/childs/enfant1.png
```

### 3. Corrections nécessaires dans votre code existant

Dans `players.py`, il y a une petite erreur dans la méthode `get_name`. Elle devrait être :

```python
@property
def get_name(self):
    return self.name
```

### 4. Lancement du jeu

```bash
python run.py
```

Le script lance automatiquement :
- **Serveur WebSocket** sur `ws://localhost:8765` (communication jeu)
- **Serveur HTTP** sur `http://localhost:8080` (images des cartes)
- **Client web** dans votre navigateur par défaut

### 5. Ouverture du client

Ouvrez `client.html` dans votre navigateur. Vous pouvez ouvrir plusieurs onglets ou fenêtres pour simuler plusieurs joueurs.

## Utilisation

### Créer une partie
1. Entrez votre nom
2. Cliquez sur "Créer une partie"
3. L'ID de la partie sera affiché

### Rejoindre une partie
1. Entrez l'ID de la partie
2. Entrez votre nom
3. Cliquez sur "Rejoindre"

### Jouer
- Cliquez sur le deck pour piocher une carte
- Cliquez sur une carte de votre main pour la jouer sur le plateau
- L'état du jeu se met à jour en temps réel pour tous les joueurs

## Fonctionnalités

### Côté Serveur
- Gestion de plusieurs parties simultanées
- Communication WebSocket en temps réel
- Gestion des connexions/déconnexions
- Synchronisation de l'état du jeu
- Maximum 5 joueurs par partie

### Côté Client
- Interface web responsive et moderne
- Connexion automatique et reconnexion
- Affichage de l'état du jeu en temps réel
- Gestion des erreurs et messages informatifs
- Design avec animations CSS

## Architecture

### Communication Client-Serveur

**Messages du client vers le serveur :**
```json
{
  "type": "create_game"
}

{
  "type": "join_game",
  "game_id": "abc123",
  "player_name": "Alice"
}

{
  "type": "take_card"
}

{
  "type": "play_card",
  "card_index": 0
}
```

**Messages du serveur vers le client :**
```json
{
  "type": "game_created",
  "game_id": "abc123"
}

{
  "type": "game_state",
  "players": [...],
  "deck_count": 10,
  "current_player_idx": 0
}

{
  "type": "player_hand",
  "hand": [...]
}

{
  "type": "error",
  "message": "Erreur description"
}
```

## Extensions possibles

### Fonctionnalités à ajouter
- Système de tours (actuellement tous les joueurs peuvent jouer)
- Plus de types de cartes
- Règles de jeu spécifiques
- Système de points/score
- Sauvegarde des parties
- Chat entre joueurs
- Authentification des joueurs
- Historique des actions

### Améliorations techniques
- Base de données pour persistance
- SSL/HTTPS pour la sécurité
- Load balancing pour plus de joueurs
- Tests unitaires
- Logs serveur
- Monitoring et métriques

## Dépannage

### Problèmes courants

**Le serveur ne se lance pas :**
- Vérifiez que le port 8765 n'est pas utilisé
- Vérifiez que websockets est installé

**Le client ne se connecte pas :**
- Vérifiez que le serveur est lancé
- Vérifiez l'URL WebSocket dans le client (localhost:8765)
- Vérifiez que votre navigateur supporte les WebSockets

**Erreur "Module not found" :**
- Vérifiez que tous vos fichiers Python sont dans le même dossier
- Vérifiez que les imports sont corrects

### Debug
- Consultez la console du navigateur pour les erreurs JavaScript
- Consultez les logs du serveur Python
- Utilisez les outils de développement du navigateur (F12)

## Sécurité

⚠️ **Important :** Cette implémentation est prévue pour un usage local/développement. Pour un déploiement en production, ajoutez :
- Validation et sanitisation des entrées
- Authentification et autorisation
- Chiffrement des communications (WSS)
- Limitation du taux de requêtes
- Gestion des erreurs robuste